version: '3.8'

services:
  backend:
    environment:
      NODE_ENV: production
      LOG_LEVEL: warn
      CORS_ORIGIN: https://mindarity.ru
      # Production-specific settings
      DATABASE_SYNCHRONIZE: "false"
      LOGGING: "true"
      DEBUG: "false"
      # Security settings
      RATE_LIMIT_TTL: "60000"
      RATE_LIMIT_LIMIT: "100"
      JWT_SECRET: "${JWT_SECRET}"
      JWT_EXPIRES_IN: "24h"
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend-prod.rule=Host(`mindarity.ru`) && PathPrefix(`/api`)"
      - "traefik.http.services.backend-prod.loadbalancer.server.port=3000"
      - "traefik.http.routers.backend-prod.tls=true"
      - "traefik.http.routers.backend-prod.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.backend-prod-rate-limit.ratelimit.average=100"
      - "traefik.http.middlewares.backend-prod-rate-limit.ratelimit.burst=200"

  frontend:
    environment:
      NODE_ENV: production
      VITE_API_URL: https://mindarity.ru/api
      VITE_KEYCLOAK_URL: https://mindarity.ru/auth
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-prod.rule=Host(`mindarity.ru`)"
      - "traefik.http.services.frontend-prod.loadbalancer.server.port=3000"
      - "traefik.http.routers.frontend-prod.tls=true"
      - "traefik.http.routers.frontend-prod.tls.certresolver=letsencrypt"

  nginx:
    environment:
      NGINX_ENV: production
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx-prod.rule=Host(`mindarity.ru`)"
      - "traefik.http.services.nginx-prod.loadbalancer.server.port=80"
      - "traefik.http.routers.nginx-prod.tls=true"
      - "traefik.http.routers.nginx-prod.tls.certresolver=letsencrypt"

  # Production database with backup
  postgres:
    environment:
      POSTGRES_DB: mindarity_prod
      POSTGRES_USER: mindarity_user
      POSTGRES_PASSWORD: mindarity_password
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - postgres_backup:/backup
    labels:
      - "traefik.enable=false"

  # Redis for production
  redis:
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    labels:
      - "traefik.enable=false"

  # Elasticsearch for production
  elasticsearch:
    environment:
      discovery.type: single-node
      xpack.security.enabled: true
      ELASTIC_PASSWORD: "${ELASTICSEARCH_PASSWORD}"
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
    volumes:
      - elasticsearch_prod_data:/usr/share/elasticsearch/data
    labels:
      - "traefik.enable=false"

  # MinIO for production
  minio:
    environment:
      MINIO_ROOT_USER: "${MINIO_ACCESS_KEY}"
      MINIO_ROOT_PASSWORD: "${MINIO_SECRET_KEY}"
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    volumes:
      - minio_prod_data:/data
    labels:
      - "traefik.enable=false"

  # Keycloak for production
  keycloak:
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: "${KEYCLOAK_ADMIN_PASSWORD}"
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak_user
      KC_DB_PASSWORD: keycloak_password
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak-prod.rule=Host(`mindarity.ru`) && PathPrefix(`/auth`)"
      - "traefik.http.services.keycloak-prod.loadbalancer.server.port=8080"
      - "traefik.http.routers.keycloak-prod.tls=true"
      - "traefik.http.routers.keycloak-prod.tls.certresolver=letsencrypt"

volumes:
  postgres_prod_data:
  postgres_backup:
  elasticsearch_prod_data:
  minio_prod_data:
