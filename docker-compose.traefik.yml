version: '3.8'

services:
  # Traefik reverse proxy
  traefik:
    image: traefik:v2.10
    container_name: mindarity-traefik
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/acme:/etc/traefik/acme
      - ./traefik/dynamic:/etc/traefik/dynamic
    networks:
      - mindarity-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.mindarity.ru`)"
      - "traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080"
      - "traefik.http.routers.traefik-dashboard.tls=true"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mindarity-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://mindarity_user:mindarity_password@postgres:5432/mindarity
      REDIS_URL: redis://redis:6379
      ELASTICSEARCH_URL: http://elasticsearch:9200
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      KEYCLOAK_URL: http://keycloak:8080
      CORS_ORIGIN: https://mindarity.ru
      # Super Admin Seed Data
      SUPER_ADMIN_EMAIL: ${SUPER_ADMIN_EMAIL}
      SUPER_ADMIN_USERNAME: ${SUPER_ADMIN_USERNAME}
      SUPER_ADMIN_PASSWORD: ${SUPER_ADMIN_PASSWORD}
      # Elasticsearch Configuration
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      # OAuth Configuration
      OAUTH_GOOGLE_CLIENT_ID: ${OAUTH_GOOGLE_CLIENT_ID}
      OAUTH_GOOGLE_CLIENT_SECRET: ${OAUTH_GOOGLE_CLIENT_SECRET}
      OAUTH_GOOGLE_CALLBACK_URL: ${OAUTH_GOOGLE_CALLBACK_URL}
      OAUTH_GITHUB_CLIENT_ID: ${OAUTH_GITHUB_CLIENT_ID}
      OAUTH_GITHUB_CLIENT_SECRET: ${OAUTH_GITHUB_CLIENT_SECRET}
      OAUTH_GITHUB_CALLBACK_URL: ${OAUTH_GITHUB_CALLBACK_URL}
      # CAPTCHA Configuration
      RECAPTCHA_SITE_KEY: ${RECAPTCHA_SITE_KEY}
      RECAPTCHA_SECRET_KEY: ${RECAPTCHA_SECRET_KEY}
      HCAPTCHA_SITE_KEY: ${HCAPTCHA_SITE_KEY}
      HCAPTCHA_SECRET_KEY: ${HCAPTCHA_SECRET_KEY}
    depends_on:
      - postgres
      - redis
      - elasticsearch
      - minio
      - keycloak
    networks:
      - mindarity-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`mindarity.ru`) && PathPrefix(`/api`)"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.backend-security.headers.customFrameOptionsValue=SAMEORIGIN"
      - "traefik.http.middlewares.backend-rate-limit.ratelimit.average=100"
      - "traefik.http.middlewares.backend-rate-limit.ratelimit.burst=200"

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mindarity-frontend
    environment:
      NODE_ENV: production
      VITE_API_URL: https://mindarity.ru/api
      VITE_KEYCLOAK_URL: https://mindarity.ru/auth
    depends_on:
      - backend
    networks:
      - mindarity-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`mindarity.ru`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: mindarity-postgres
    environment:
      POSTGRES_DB: mindarity
      POSTGRES_USER: mindarity_user
      POSTGRES_PASSWORD: mindarity_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backup:/backup
    networks:
      - mindarity-network
    labels:
      - "traefik.enable=false"

  # Redis
  redis:
    image: redis:7-alpine
    container_name: mindarity-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - mindarity-network
    labels:
      - "traefik.enable=false"

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: mindarity-elasticsearch
    environment:
      discovery.type: single-node
      xpack.security.enabled: true
      ELASTIC_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - mindarity-network
    labels:
      - "traefik.enable=false"

  # MinIO
  minio:
    image: minio/minio:latest
    container_name: mindarity-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - mindarity-network
    labels:
      - "traefik.enable=false"

  # Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: mindarity-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak_user
      KC_DB_PASSWORD: keycloak_password
      KC_HOSTNAME: mindarity.ru
      KC_HOSTNAME_ADMIN: mindarity.ru
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
    depends_on:
      - postgres
    networks:
      - mindarity-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=Host(`mindarity.ru`) && PathPrefix(`/auth`)"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
      - "traefik.http.routers.keycloak.tls=true"
      - "traefik.http.routers.keycloak.tls.certresolver=letsencrypt"

volumes:
  postgres_data:
  postgres_backup:
  redis_data:
  elasticsearch_data:
  minio_data:

networks:
  mindarity-network:
    driver: bridge
