import React, { useState } from 'react';
import './TwoFactorTest.scss';

const TwoFactorTest: React.FC = () => {
  const [isEnabled, setIsEnabled] = useState(false);
  const [otpCode, setOtpCode] = useState('');
  const [verificationResult, setVerificationResult] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);

  const handleEnable2FA = async () => {
    setIsLoading(true);
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage
      const token = localStorage.getItem('auth_token');
      
      if (!token) {
        setVerificationResult('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É');
        setIsLoading(false);
        return;
      }

      // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è 2FA
      const response = await fetch('/api/users/profile/enable-2fa', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ 2FA');
      }

      const data = await response.json();
      
      setIsEnabled(true);
      setVerificationResult(`2FA –≤–∫–ª—é—á–µ–Ω–∞! –ö–æ–¥: ${data.code}. –ò—Å—Ç–µ–∫–∞–µ—Ç: ${new Date(data.expiresAt).toLocaleTimeString()}`);
      setIsLoading(false);
    } catch (error) {
      setVerificationResult(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ 2FA: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      setIsLoading(false);
    }
  };

  const handleVerifyOTP = async () => {
    if (!otpCode || otpCode.length !== 4) {
      setVerificationResult('–í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥');
      return;
    }

    setIsLoading(true);
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OTP
      // –ü–æ–∫–∞ —á—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º
      setTimeout(() => {
        if (otpCode === '1234') { // –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥
          setVerificationResult('‚úÖ OTP –∫–æ–¥ –≤–µ—Ä–Ω—ã–π! –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.');
        } else {
          setVerificationResult('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π OTP –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
        setIsLoading(false);
      }, 1000);
    } catch (error) {
      setVerificationResult('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ OTP');
      setIsLoading(false);
    }
  };

  return (
    <div className="two-factor-test-page">
      <div className="two-factor-test-container">
        <h1>üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 2FA</h1>
        <p>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å OTP –∫–æ–¥–∞–º–∏</p>
        
        <div className="test-section">
          <h3>1. –í–∫–ª—é—á–µ–Ω–∏–µ 2FA</h3>
          <button 
            onClick={handleEnable2FA}
            disabled={isLoading || isEnabled}
            className="enable-btn"
          >
            {isLoading ? '–í–∫–ª—é—á–µ–Ω–∏–µ...' : isEnabled ? '2FA –≤–∫–ª—é—á–µ–Ω–∞' : '–í–∫–ª—é—á–∏—Ç—å 2FA'}
          </button>
        </div>

        {isEnabled && (
          <div className="test-section">
            <h3>2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OTP</h3>
            <div className="otp-input-section">
              <label htmlFor="otpCode">–í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥:</label>
              <input
                type="text"
                id="otpCode"
                value={otpCode}
                onChange={(e) => {
                  const value = e.target.value.replace(/\D/g, '').slice(0, 4);
                  setOtpCode(value);
                }}
                placeholder="0000"
                maxLength={4}
                pattern="[0-9]{4}"
                className="otp-input"
              />
              <button 
                onClick={handleVerifyOTP}
                disabled={isLoading || otpCode.length !== 4}
                className="verify-btn"
              >
                {isLoading ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'}
              </button>
            </div>
            
            <div className="test-info">
              <p><strong>–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥:</strong> 1234</p>
              <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {isEnabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}</p>
            </div>
          </div>
        )}

        {verificationResult && (
          <div className={`result-message ${verificationResult.includes('‚úÖ') ? 'success' : 'error'}`}>
            {verificationResult}
          </div>
        )}

        <div className="test-section">
          <h3>3. –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</h3>
          <div className="info-cards">
            <div className="info-card">
              <h4>üîë –ü–µ—Ä–≤—ã–π —Ñ–∞–∫—Ç–æ—Ä</h4>
              <p>–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å</p>
            </div>
            <div className="info-card">
              <h4>üì± –í—Ç–æ—Ä–æ–π —Ñ–∞–∫—Ç–æ—Ä</h4>
              <p>4-–∑–Ω–∞—á–Ω—ã–π OTP –∫–æ–¥</p>
            </div>
            <div className="info-card">
              <h4>‚è∞ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è</h4>
              <p>5 –º–∏–Ω—É—Ç</p>
            </div>
          </div>
        </div>

        <div className="test-section">
          <h3>4. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é</h3>
          <div className="instructions">
            <ol>
              <li><strong>–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É</strong> –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ <a href="/login" target="_blank">/login</a></li>
              <li><strong>–í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞</strong> –∏ –Ω–∞–∂–º–∏—Ç–µ "–í–∫–ª—é—á–∏—Ç—å 2FA"</li>
              <li><strong>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥</strong> –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞</li>
              <li><strong>–í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞</strong> - —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è —Ñ–æ—Ä–º–∞ 2FA</li>
              <li><strong>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥</strong> –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ö–æ–¥–∞</li>
            </ol>
          </div>
        </div>

        <div className="test-section">
          <h3>5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞ —Å 2FA</h3>
          <div className="demo-section">
            <div className="demo-step">
              <h4>–®–∞–≥ 1: –û–±—ã—á–Ω—ã–π –≤—Ö–æ–¥</h4>
              <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç email –∏ –ø–∞—Ä–æ–ª—å</p>
              <div className="demo-code">
                <code>POST /api/auth/login</code>
              </div>
            </div>
            
            <div className="demo-step">
              <h4>–®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ 2FA</h4>
              <p>–ï—Å–ª–∏ 2FA –≤–∫–ª—é—á–µ–Ω–∞, —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:</p>
              <div className="demo-code">
                <pre>{`{
  "requires2FA": true,
  "userId": "user-id",
  "message": "2FA required",
  "otpCode": "1234"
}`}</pre>
              </div>
            </div>
            
            <div className="demo-step">
              <h4>–®–∞–≥ 3: –§–æ—Ä–º–∞ 2FA</h4>
              <p>Frontend –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ OTP</p>
              <div className="demo-code">
                <code>&lt;TwoFactorAuth /&gt;</code>
              </div>
            </div>
            
            <div className="demo-step">
              <h4>–®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ OTP</h4>
              <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç:</p>
              <div className="demo-code">
                <code>POST /api/auth/login-2fa</code>
              </div>
            </div>
          </div>
        </div>

        <div className="test-footer">
          <p>üí° <strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong> –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ OTP –∫–æ–¥—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.</p>
        </div>
      </div>
    </div>
  );
};

export default TwoFactorTest;
