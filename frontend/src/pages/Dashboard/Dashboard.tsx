import React, { useState, useEffect } from 'react';
import apiService from '../../services/api';
import './Dashboard.scss';

interface DashboardStats {
  totalEvents: number;
  totalGoals: number;
  totalTasks: number;
  completedTasks: number;
  upcomingDeadlines: number;
  moodDistribution: Record<string, number>;
  goalProgress: Array<{ name: string; progress: number }>;
  recentActivity: Array<{ type: string; title: string; date: string }>;
}

const Dashboard: React.FC = () => {
  const [stats, setStats] = useState<DashboardStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [selectedPeriod, setSelectedPeriod] = useState<'week' | 'month' | 'year'>('week');

  useEffect(() => {
    fetchDashboardStats();
  }, [selectedPeriod]);

  const fetchDashboardStats = async () => {
    try {
      setLoading(true);
      const stats = await apiService.getDashboardStats(selectedPeriod);
      setStats(stats);
    } catch (error) {
      console.error('Error fetching dashboard stats:', error);
    } finally {
      setLoading(false);
    }
  };

  const getCompletionRate = () => {
    if (!stats) return 0;
    return Math.round((stats.completedTasks / stats.totalTasks) * 100);
  };

  const getAverageGoalProgress = () => {
    if (!stats) return 0;
    const total = stats.goalProgress.reduce((sum, goal) => sum + goal.progress, 0);
    return Math.round(total / stats.goalProgress.length);
  };

  if (loading) {
    return (
      <div className="dashboard">
        <div className="dashboard__loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>
      </div>
    );
  }

  if (!stats) {
    return (
      <div className="dashboard">
        <div className="dashboard__error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</div>
      </div>
    );
  }

  return (
    <div className="dashboard">
      <div className="dashboard__header">
        <h1>–î–∞—à–±–æ—Ä–¥</h1>
        <div className="period-selector">
          <button 
            className={`period-btn ${selectedPeriod === 'week' ? 'active' : ''}`}
            onClick={() => setSelectedPeriod('week')}
          >
            –ù–µ–¥–µ–ª—è
          </button>
          <button 
            className={`period-btn ${selectedPeriod === 'month' ? 'active' : ''}`}
            onClick={() => setSelectedPeriod('month')}
          >
            –ú–µ—Å—è—Ü
          </button>
          <button 
            className={`period-btn ${selectedPeriod === 'year' ? 'active' : ''}`}
            onClick={() => setSelectedPeriod('year')}
          >
            –ì–æ–¥
          </button>
        </div>
      </div>

      <div className="dashboard__grid">
        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
        <div className="metrics-row">
          <div className="metric-card">
            <div className="metric-icon">üìä</div>
            <div className="metric-content">
              <div className="metric-value">{stats.totalEvents}</div>
              <div className="metric-label">–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π</div>
            </div>
          </div>

          <div className="metric-card">
            <div className="metric-icon">üéØ</div>
            <div className="metric-content">
              <div className="metric-value">{stats.totalGoals}</div>
              <div className="metric-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π</div>
            </div>
          </div>

          <div className="metric-card">
            <div className="metric-icon">‚úÖ</div>
            <div className="metric-content">
              <div className="metric-value">{getCompletionRate()}%</div>
              <div className="metric-label">–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á</div>
            </div>
          </div>

          <div className="metric-card">
            <div className="metric-icon">‚è∞</div>
            <div className="metric-content">
              <div className="metric-value">{stats.upcomingDeadlines}</div>
              <div className="metric-label">–°—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏</div>
            </div>
          </div>
        </div>

        {/* –ì—Ä–∞—Ñ–∏–∫–∏ */}
        <div className="charts-row">
          <div className="chart-card">
            <h3>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π</h3>
            <div className="chart-container">
              <div className="mood-chart">
                {Object.entries(stats.moodDistribution).map(([mood, count]) => (
                  <div key={mood} className="mood-item">
                    <div className="mood-emoji">{mood}</div>
                    <div className="mood-bar">
                      <div 
                        className="mood-fill" 
                        style={{ 
                          width: `${(count / Math.max(...Object.values(stats.moodDistribution))) * 100}%` 
                        }}
                      ></div>
                    </div>
                    <div className="mood-count">{count}</div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          <div className="chart-card">
            <h3>–ü—Ä–æ–≥—Ä–µ—Å—Å —Ü–µ–ª–µ–π</h3>
            <div className="chart-container">
              <div className="goals-progress">
                {stats.goalProgress.map((goal, index) => (
                  <div key={index} className="goal-progress-item">
                    <div className="goal-name">{goal.name}</div>
                    <div className="goal-progress-bar">
                      <div 
                        className="goal-progress-fill" 
                        style={{ width: `${goal.progress}%` }}
                      ></div>
                    </div>
                    <div className="goal-progress-value">{goal.progress}%</div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="stats-row">
          <div className="stats-card">
            <h3>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            <div className="stats-grid">
              <div className="stat-item">
                <div className="stat-label">–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Ü–µ–ª–µ–π</div>
                <div className="stat-value">{getAverageGoalProgress()}%</div>
              </div>
              <div className="stat-item">
                <div className="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á</div>
                <div className="stat-value">{stats.completedTasks}</div>
              </div>
              <div className="stat-item">
                <div className="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á</div>
                <div className="stat-value">{stats.totalTasks - stats.completedTasks}</div>
              </div>
              <div className="stat-item">
                <div className="stat-label">–ü–µ—Ä–∏–æ–¥</div>
                <div className="stat-value">
                  {selectedPeriod === 'week' ? '–ù–µ–¥–µ–ª—è' : 
                   selectedPeriod === 'month' ? '–ú–µ—Å—è—Ü' : '–ì–æ–¥'}
                </div>
              </div>
            </div>
          </div>

          <div className="stats-card">
            <h3>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>
            <div className="activity-list">
              {stats.recentActivity.map((activity, index) => (
                <div key={index} className="activity-item">
                  <div className="activity-icon">
                    {activity.type === 'event' ? 'üìù' : 
                     activity.type === 'task' ? '‚úÖ' : 'üéØ'}
                  </div>
                  <div className="activity-content">
                    <div className="activity-title">{activity.title}</div>
                    <div className="activity-time">{activity.date}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="actions-row">
          <div className="actions-card">
            <h3>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
            <div className="actions-grid">
              <button className="action-btn">
                <span className="action-icon">üìù</span>
                <span className="action-text">–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ</span>
              </button>
              <button className="action-btn">
                <span className="action-icon">üéØ</span>
                <span className="action-text">–ù–æ–≤–∞—è —Ü–µ–ª—å</span>
              </button>
              <button className="action-btn">
                <span className="action-icon">‚úÖ</span>
                <span className="action-text">–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞</span>
              </button>
              <button className="action-btn">
                <span className="action-icon">üìä</span>
                <span className="action-text">–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard; 