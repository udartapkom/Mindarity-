import React, { useState, useEffect } from 'react';
import { useAuth } from '../../contexts/useAuth';
import apiService, { normalizeAvatarUrl } from '../../services/api';
import type { User, Session } from '../../services/api';
import './Profile.scss';

// type UserProfile = User; // –£–±—Ä–∞–Ω –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–∏–ø

interface ChangePasswordForm {
  currentPassword: string;
  newPassword: string;
  confirmPassword: string;
}

const Profile: React.FC = () => {
  const { logout, updateUser } = useAuth();
  const [profile, setProfile] = useState<User | null>(null);
  const [sessions, setSessions] = useState<Session[]>([]);
  const [loading, setLoading] = useState(true);
  const [editing, setEditing] = useState(false);
  const [showPasswordForm, setShowPasswordForm] = useState(false);
  const [showAvatarForm, setShowAvatarForm] = useState(false);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [avatarPreview, setAvatarPreview] = useState<string>('');

  const [profileForm, setProfileForm] = useState({
    firstName: '',
    lastName: '',
    bio: '',
  });

  const [passwordForm, setPasswordForm] = useState<ChangePasswordForm>({
    currentPassword: '',
    newPassword: '',
    confirmPassword: '',
  });

  useEffect(() => {
    fetchProfile();
    fetchSessions();
  }, []);

  const fetchProfile = async () => {
    try {
      const profileData = await apiService.getProfile();
      setProfile(profileData);
      setProfileForm({
        firstName: profileData.firstName || '',
        lastName: profileData.lastName || '',
        bio: profileData.bio || '',
      });
    } catch (error) {
      console.error('Error fetching profile:', error);
    }
  };

  const fetchSessions = async () => {
    try {
      const sessions = await apiService.getSessions();
      setSessions(sessions);
    } catch (error) {
      console.error('Error fetching sessions:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleProfileSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      await apiService.updateProfile(profileForm);
      setProfile(prev => prev ? { ...prev, ...profileForm } : null);
      setEditing(false);
    } catch (error) {
      console.error('Error updating profile:', error);
    }
  };

  const handlePasswordSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (passwordForm.newPassword !== passwordForm.confirmPassword) {
      alert('–ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      return;
    }

    try {
      await apiService.changePassword({
        currentPassword: passwordForm.currentPassword,
        newPassword: passwordForm.newPassword
      });
      setPasswordForm({
        currentPassword: '',
        newPassword: '',
        confirmPassword: '',
      });
      setShowPasswordForm(false);
      alert('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω');
    } catch (error) {
      console.error('Error changing password:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è');
    }
  };

  const handleAvatarUpload = async () => {
    if (!selectedFile) return;

    try {
      const updatedUser = await apiService.uploadAvatar(selectedFile);
      setShowAvatarForm(false);
      setSelectedFile(null);
      setAvatarPreview('');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      setProfile(prev => prev ? { ...prev, avatar: updatedUser.avatar } : null);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ AuthContext (—ç—Ç–æ –æ–±–Ω–æ–≤–∏—Ç –∞–≤–∞—Ç–∞—Ä –≤ Sidebar)
      updateUser({ avatar: updatedUser.avatar });
      
      alert('–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
    } catch (error) {
      console.error('Error uploading avatar:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞');
    }
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setSelectedFile(file);
      const reader = new FileReader();
      reader.onload = (e) => {
        setAvatarPreview(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const terminateSession = async (sessionId: string) => {
    try {
      await apiService.terminateSession(sessionId);
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setSessions(prev => prev.filter(session => session.id !== sessionId));
      alert('–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('Error terminating session:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏');
    }
  };

  const terminateAllOtherSessions = async () => {
    try {
      await apiService.terminateAllOtherSessions();
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
      setSessions(prev => prev.filter(session => session.isCurrent));
      alert('–í—Å–µ –¥—Ä—É–≥–∏–µ —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
    } catch (error) {
      console.error('Error terminating all sessions:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π');
    }
  };

  const terminateAllSessions = async () => {
    const confirmed = window.confirm(
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –í–°–ï —Å–µ—Å—Å–∏–∏? –≠—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –≤—ã—Ö–æ–¥—É –∏–∑ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–µ.'
    );
    
    if (!confirmed) return;
    
    try {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é
      await apiService.terminateAllUserSessions();
      alert('–í—Å–µ —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞.');
      // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
      logout();
      window.location.href = '/login';
    } catch (error) {
      console.error('Error terminating all sessions:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π');
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const getDeviceIcon = (device: string) => {
    if (device.includes('Mobile')) return 'üì±';
    if (device.includes('Tablet')) return 'üì±';
    if (device.includes('Windows')) return 'üíª';
    if (device.includes('Mac')) return 'üçé';
    if (device.includes('Linux')) return 'üêß';
    return 'üíª';
  };

  if (loading) {
    return (
      <div className="profile">
        <div className="profile__loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</div>
      </div>
    );
  }

  if (!profile) {
    return (
      <div className="profile">
        <div className="profile__error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</div>
      </div>
      );
  }

  return (
    <div className="profile">
      <div className="profile__header">
        <h1>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h1>
      </div>

      <div className="profile__content">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="profile-section">
          <div className="profile-avatar">
            <img 
              src={normalizeAvatarUrl(profile.avatar) || '/default-avatar.png'} 
              alt="–ê–≤–∞—Ç–∞—Ä" 
              className="avatar-image"
            />
            <button 
              className="avatar-edit-btn"
              onClick={() => setShowAvatarForm(true)}
            >
              ‚úèÔ∏è
            </button>
          </div>

          <div className="profile-info">
            <h2>{profile.firstName} {profile.lastName}</h2>
            <p className="profile-email">{profile.email}</p>
            <p className="profile-role">–†–æ–ª—å: {profile.role === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</p>
            <p className="profile-status">
              –°—Ç–∞—Ç—É—Å: {profile.isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
            </p>
            <p className="profile-joined">
              –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {formatDate(profile.createdAt)}
            </p>
            {profile.lastLoginAt && (
              <p className="profile-last-login">
                –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {formatDate(profile.lastLoginAt)}
              </p>
            )}
          </div>
        </div>

        {/* –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è */}
        <div className="profile-section">
          <div className="section-header">
            <h3>–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <button 
              className="btn btn--secondary"
              onClick={() => setEditing(!editing)}
            >
              {editing ? '–û—Ç–º–µ–Ω–∞' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
            </button>
          </div>

          {editing ? (
            <form onSubmit={handleProfileSubmit} className="profile-form">
              <div className="form-row">
                <div className="form-group">
                  <label>–ò–º—è</label>
                  <input
                    type="text"
                    value={profileForm.firstName}
                    onChange={(e) => setProfileForm(prev => ({ ...prev, firstName: e.target.value }))}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>–§–∞–º–∏–ª–∏—è</label>
                  <input
                    type="text"
                    value={profileForm.lastName}
                    onChange={(e) => setProfileForm(prev => ({ ...prev, lastName: e.target.value }))}
                    required
                  />
                </div>
              </div>
              <div className="form-group">
                <label>–û —Å–µ–±–µ</label>
                <textarea
                  value={profileForm.bio}
                  onChange={(e) => setProfileForm(prev => ({ ...prev, bio: e.target.value }))}
                  rows={4}
                  placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ..."
                />
              </div>
              <div className="form-actions">
                <button type="submit" className="btn btn--primary">
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
              </div>
            </form>
          ) : (
            <div className="profile-details">
              <p><strong>–ò–º—è:</strong> {profile.firstName}</p>
              <p><strong>–§–∞–º–∏–ª–∏—è:</strong> {profile.lastName}</p>
              <p><strong>–û —Å–µ–±–µ:</strong> {profile.bio || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
            </div>
          )}
        </div>

        {/* –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è */}
        <div className="profile-section">
          <div className="section-header">
            <h3>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h3>
            <button 
              className="btn btn--secondary"
              onClick={() => setShowPasswordForm(!showPasswordForm)}
            >
              {showPasswordForm ? '–û—Ç–º–µ–Ω–∞' : '–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å'}
            </button>
          </div>

          {showPasswordForm && (
            <form onSubmit={handlePasswordSubmit} className="password-form">
              <div className="form-group">
                <label>–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å</label>
                <input
                  type="password"
                  value={passwordForm.currentPassword}
                  onChange={(e) => setPasswordForm(prev => ({ ...prev, currentPassword: e.target.value }))}
                  required
                />
              </div>
              <div className="form-row">
                <div className="form-group">
                  <label>–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
                  <input
                    type="password"
                    value={passwordForm.newPassword}
                    onChange={(e) => setPasswordForm(prev => ({ ...prev, newPassword: e.target.value }))}
                    required
                    minLength={8}
                  />
                </div>
                <div className="form-group">
                  <label>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
                  <input
                    type="password"
                    value={passwordForm.confirmPassword}
                    onChange={(e) => setPasswordForm(prev => ({ ...prev, confirmPassword: e.target.value }))}
                    required
                    minLength={8}
                  />
                </div>
              </div>
              <div className="form-actions">
                <button type="submit" className="btn btn--primary">
                  –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
                </button>
              </div>
            </form>
          )}
        </div>

        {/* –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ */}
        <div className="profile-section">
          <div className="section-header">
            <h3>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏</h3>
            <div className="session-actions">
              <button 
                className="btn btn--secondary"
                onClick={terminateAllOtherSessions}
              >
                –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å–µ—Å—Å–∏–∏
              </button>
              <button 
                className="btn btn--danger"
                onClick={terminateAllSessions}
              >
                –ó–∞–≤–µ—Ä—à–∏—Ç—å –í–°–ï —Å–µ—Å—Å–∏–∏
              </button>
            </div>
          </div>

          <div className="sessions-list">
            {sessions.map((session) => (
              <div key={session.id} className="session-item">
                <div className="session-info">
                  <div className="session-device">
                    {getDeviceIcon(session.device)} {session.device}
                  </div>
                  <div className="session-ip">{session.ipAddress}</div>
                  <div className="session-activity">
                    –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {formatDate(session.lastActivity)}
                  </div>
                  {session.isCurrent && (
                    <div className="session-current">–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è</div>
                  )}
                </div>
                {!session.isCurrent && (
                  <button 
                    className="btn btn--danger btn--small"
                    onClick={() => terminateSession(session.id)}
                  >
                    –ó–∞–≤–µ—Ä—à–∏—Ç—å
                  </button>
                )}
              </div>
            ))}
          </div>
        </div>

        {/* –î–µ–π—Å—Ç–≤–∏—è */}
        <div className="profile-section">
          <div className="section-header">
            <h3>–î–µ–π—Å—Ç–≤–∏—è</h3>
          </div>
          <div className="profile-actions">
            <button className="btn btn--danger" onClick={logout}>
              –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
            </button>
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ */}
      {showAvatarForm && (
        <div className="modal-overlay">
          <div className="modal">
            <div className="modal-header">
              <h3>–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä</h3>
              <button 
                className="modal-close"
                onClick={() => {
                  setShowAvatarForm(false);
                  setSelectedFile(null);
                  setAvatarPreview('');
                }}
              >
                √ó
              </button>
            </div>
            <div className="avatar-upload">
              <input
                type="file"
                accept="image/*"
                onChange={handleFileSelect}
                className="file-input"
              />
              {avatarPreview && (
                <div className="avatar-preview">
                  <img src={avatarPreview} alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä" />
                </div>
              )}
              <div className="upload-actions">
                <button 
                  className="btn btn--primary"
                  onClick={handleAvatarUpload}
                  disabled={!selectedFile}
                >
                  –ó–∞–≥—Ä—É–∑–∏—Ç—å
                </button>
                <button 
                  className="btn btn--secondary"
                  onClick={() => {
                    setShowAvatarForm(false);
                    setSelectedFile(null);
                    setAvatarPreview('');
                  }}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Profile; 