import React, { useState } from 'react';
import { useAuth } from '../../contexts/useAuth';
import { useNavigate } from 'react-router-dom';
import Captcha from '../../components/Captcha';
import TwoFactorAuth from '../../components/TwoFactorAuth';
import './Login.scss';

const Login: React.FC = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [isRegister, setIsRegister] = useState(false);
  const [username, setUsername] = useState('');
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [isCaptchaVerified, setIsCaptchaVerified] = useState(false);
  
  // 2FA —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [show2FA, setShow2FA] = useState(false);
  const [userId, setUserId] = useState('');

  const { login, register, complete2FA } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!isCaptchaVerified) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É CAPTCHA');
      return;
    }
    
    setError('');
    setIsLoading(true);

    try {
      if (isRegister) {
        await register(username, email, password, firstName, lastName);
        navigate('/dashboard');
      } else {
        const response = await login(email, password);
        
        // 2FA —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (response.requires2FA && response.userId) {
          setUserId(response.userId);
          setShow2FA(true);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –æ–∫–Ω–µ
          if (response.otpCode) {
            alert(`üîê –ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞: ${response.otpCode}\n\n–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç.`);
          }
        } else {
          // –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ 2FA —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
          setError('–û—à–∏–±–∫–∞: 2FA –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
      }
    } catch (err: unknown) {
      const errorMessage = err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞';
      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  const handle2FAVerify = async (otpCode: string) => {
    try {
      setIsLoading(true);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ AuthContext –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è 2FA
      await complete2FA(userId, otpCode);
      
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π 2FA –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥
      window.location.href = '/dashboard';
    } catch (err: unknown) {
      const errorMessage = err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ 2FA';
      setError(errorMessage);
      throw err; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã TwoFactorAuth –º–æ–≥ –µ—ë –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    } finally {
      setIsLoading(false);
    }
  };

  const handle2FACancel = () => {
    setShow2FA(false);
    setUserId('');
    setError('');
  };

  const toggleMode = () => {
    setIsRegister(!isRegister);
    setError('');
    setIsCaptchaVerified(false);
  };

  const handleCaptchaVerify = (isValid: boolean) => {
    setIsCaptchaVerified(isValid);
    if (isValid) {
      setError('');
    }
  };

  const handleCaptchaRefresh = () => {
    setIsCaptchaVerified(false);
    setError('');
  };

  // –ï—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è 2FA, —Ä–µ–Ω–¥–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ –µ—ë
  if (show2FA) {
    return (
      <TwoFactorAuth
        onVerify={handle2FAVerify}
        onCancel={handle2FACancel}
      />
    );
  }

  return (
    <div className="login-page">
      <div className="login-container">
        <div className="login-header">
          <h1>Mindarity</h1>
          <p>–õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏</p>
        </div>

        <form onSubmit={handleSubmit} className="login-form">
          {isRegister && (
            <>
              <div className="form-group">
                <label htmlFor="username">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
                <input
                  type="text"
                  id="username"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  required={isRegister}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                />
              </div>

              <div className="form-group"> 
                <label htmlFor="firstName">–ò–º—è</label>
                <input
                  type="text"
                  id="firstName"
                  value={firstName}
                  onChange={(e) => setFirstName(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
                />
              </div>

              <div className="form-group">
                <label htmlFor="lastName">–§–∞–º–∏–ª–∏—è</label>
                <input
                  type="text"
                  id="lastName"
                  value={lastName}
                  onChange={(e) => setLastName(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
                />
              </div>
            </>
          )}

          <div className="form-group">
            <label htmlFor="email">Email</label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              placeholder="–í–≤–µ–¥–∏—Ç–µ email"
            />
          </div>

          <div className="form-group">
            <label htmlFor="password">–ü–∞—Ä–æ–ª—å</label>
            <input
              type="password"
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
            />
          </div>

          <Captcha 
            onVerify={handleCaptchaVerify}
            onRefresh={handleCaptchaRefresh}
          />

          {error && <div className="error-message">{error}</div>}

          <button 
            type="submit" 
            className="submit-btn" 
            disabled={isLoading || !isCaptchaVerified}
          >
            {isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : (isRegister ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : '–í–æ–π—Ç–∏')}
          </button>
        </form>

        <div className="login-footer">
          <button type="button" className="toggle-mode-btn" onClick={toggleMode}>
            {isRegister ? '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏' : '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default Login;
