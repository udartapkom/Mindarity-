import React, { useState, useEffect, useCallback } from 'react';
import { useAuth } from '../../contexts/useAuth';
import './Admin.scss';

interface User {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  role: string;
  isActive: boolean;
  status: string;
  createdAt: string;
  lastLoginAt: string;
  loginAttempts: number;
  lockedUntil?: string;
}

interface SystemMetrics {
  cpu: number;
  memory: number;
  disk: number;
  load: number;
}

interface SecurityAlert {
  id: string;
  type: 'failed_login' | 'system_error' | 'resource_high' | 'component_down';
  message: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  timestamp: string;
  resolved: boolean;
}

const Admin: React.FC = () => {
  const { user } = useAuth();
  const [users, setUsers] = useState<User[]>([]);
  const [systemMetrics, setSystemMetrics] = useState<SystemMetrics | null>(null);
  const [securityAlerts, setSecurityAlerts] = useState<SecurityAlert[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterRole, setFilterRole] = useState('all');
  const [filterStatus, setFilterStatus] = useState('all');

  const fetchData = useCallback(async () => {
    try {
      setLoading(true);
      await Promise.all([
        fetchUsers(),
        fetchSystemMetrics(),
        fetchSecurityAlerts(),
      ]);
    } catch (error) {
      console.error('Error fetching admin data:', error);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    if (user?.role !== 'admin') {
      return;
    }
    fetchData();
    const interval = setInterval(fetchSystemMetrics, 30000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    return () => clearInterval(interval);
  }, [user, fetchData]);

  const fetchUsers = async () => {
    try {
      // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É, —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥ getUsers –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const mockUsers: User[] = [
        {
          id: '1',
          firstName: 'Admin',
          lastName: 'User',
          email: 'admin@example.com',
          role: 'admin',
          isActive: true,
          status: 'active',
          createdAt: new Date().toISOString(),
          lastLoginAt: new Date().toISOString(),
          loginAttempts: 0
        }
      ];
      setUsers(mockUsers);
    } catch (error) {
      console.error('Error fetching users:', error);
    }
  };

  const fetchSystemMetrics = async () => {
    try {
      // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
      const mockMetrics: SystemMetrics = {
        cpu: Math.random() * 100,
        memory: Math.random() * 100,
        disk: Math.random() * 100,
        load: Math.random() * 5
      };
      setSystemMetrics(mockMetrics);
    } catch (error) {
      console.error('Error fetching system metrics:', error);
    }
  };

  const fetchSecurityAlerts = async () => {
    try {
      // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
      const mockAlerts: SecurityAlert[] = [];
      setSecurityAlerts(mockAlerts);
    } catch (error) {
      console.error('Error fetching security alerts:', error);
    }
  };

  const toggleUserStatus = async (userId: string, isActive: boolean) => {
    try {
      // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
      setUsers(prev => prev.map(user => 
        user.id === userId ? { ...user, isActive } : user
      ));
    } catch (error) {
      console.error('Error updating user status:', error);
    }
  };

  const resetUserPassword = async () => {
    try {
      // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è');
    } catch (error) {
      console.error('Error resetting user password:', error);
    }
  };

  const terminateUserSessions = async () => {
    try {
      // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
      alert('–í—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
    } catch (error) {
      console.error('Error terminating user sessions:', error);
    }
  };

  const resolveSecurityAlert = async (alertId: string) => {
    try {
      // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
      setSecurityAlerts(prev => prev.map(alert => 
        alert.id === alertId ? { ...alert, resolved: true } : alert
      ));
    } catch (error) {
      console.error('Error resolving security alert:', error);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return '#28a745';
      case 'inactive': return '#dc3545';
      case 'locked': return '#ffc107';
      case 'pending': return '#17a2b8';
      default: return '#6c757d';
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'low': return '#28a745';
      case 'medium': return '#ffc107';
      case 'high': return '#fd7e14';
      case 'critical': return '#dc3545';
      default: return '#6c757d';
    }
  };

  const getResourceStatus = (value: number) => {
    if (value < 50) return { status: 'normal', color: '#28a745' };
    if (value < 75) return { status: 'warning', color: '#ffc107' };
    if (value < 85) return { status: 'high', color: '#fd7e14' };
    return { status: 'critical', color: '#dc3545' };
  };

  const filteredUsers = users.filter(user => {
    const matchesSearch = user.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         user.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         user.email.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesRole = filterRole === 'all' || user.role === filterRole;
    const matchesStatus = filterStatus === 'all' || 
                         (filterStatus === 'active' && user.isActive) ||
                         (filterStatus === 'inactive' && !user.isActive);
    
    return matchesSearch && matchesRole && matchesStatus;
  });

  if (user?.role !== 'admin') {
    return (
      <div className="admin">
        <div className="admin__access-denied">
          <h2>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h2>
          <p>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</p>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="admin">
        <div className="admin__loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...</div>
      </div>
    );
  }

  return (
    <div className="admin">
      <div className="admin__header">
        <h1>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h1>
        <button className="btn btn--primary" onClick={fetchData}>
          –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        </button>
      </div>

      <div className="admin__content">
        {/* –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
        <div className="admin-section">
          <h2>–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã</h2>
          {systemMetrics && (
            <div className="metrics-grid">
              <div className="metric-card">
                <div className="metric-icon">üñ•Ô∏è</div>
                <div className="metric-content">
                  <div className="metric-value">{systemMetrics.cpu}%</div>
                  <div className="metric-label">CPU</div>
                  <div 
                    className="metric-status"
                    style={{ color: getResourceStatus(systemMetrics.cpu).color }}
                  >
                    {getResourceStatus(systemMetrics.cpu).status}
                  </div>
                </div>
              </div>

              <div className="metric-card">
                <div className="metric-icon">üíæ</div>
                <div className="metric-content">
                  <div className="metric-value">{systemMetrics.memory}%</div>
                  <div className="metric-label">–ü–∞–º—è—Ç—å</div>
                  <div 
                    className="metric-status"
                    style={{ color: getResourceStatus(systemMetrics.memory).color }}
                  >
                    {getResourceStatus(systemMetrics.memory).status}
                  </div>
                </div>
              </div>

              <div className="metric-card">
                <div className="metric-icon">üíø</div>
                <div className="metric-content">
                  <div className="metric-value">{systemMetrics.disk}%</div>
                  <div className="metric-label">–î–∏—Å–∫</div>
                  <div 
                    className="metric-status"
                    style={{ color: getResourceStatus(systemMetrics.disk).color }}
                  >
                    {getResourceStatus(systemMetrics.disk).status}
                  </div>
                </div>
              </div>

              <div className="metric-card">
                <div className="metric-icon">üìä</div>
                <div className="metric-content">
                  <div className="metric-value">{systemMetrics.load.toFixed(2)}</div>
                  <div className="metric-label">–ù–∞–≥—Ä—É–∑–∫–∞</div>
                  <div 
                    className="metric-status"
                    style={{ color: getResourceStatus(systemMetrics.load * 20).color }}
                  >
                    {getResourceStatus(systemMetrics.load * 20).status}
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ */}
        <div className="admin-section">
          <h2>–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h2>
          <div className="security-alerts">
            {securityAlerts.length === 0 ? (
              <div className="no-alerts">–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç</div>
            ) : (
              securityAlerts.map(alert => (
                <div key={alert.id} className={`security-alert ${alert.severity}`}>
                  <div className="alert-header">
                    <div className="alert-type">
                      {alert.type === 'failed_login' ? 'üîê' :
                       alert.type === 'system_error' ? '‚ö†Ô∏è' :
                       alert.type === 'resource_high' ? 'üìà' : 'üö®'}
                      {alert.type === 'failed_login' ? '–ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞' :
                       alert.type === 'system_error' ? '–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã' :
                       alert.type === 'resource_high' ? '–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞' : '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞'}
                    </div>
                    <div 
                      className="alert-severity"
                      style={{ backgroundColor: getSeverityColor(alert.severity) }}
                    >
                      {alert.severity.toUpperCase()}
                    </div>
                  </div>
                  <div className="alert-message">{alert.message}</div>
                  <div className="alert-footer">
                    <span className="alert-time">
                      {new Date(alert.timestamp).toLocaleString('ru-RU')}
                    </span>
                    {!alert.resolved && (
                      <button 
                        className="btn btn--small"
                        onClick={() => resolveSecurityAlert(alert.id)}
                      >
                        –†–µ—à–µ–Ω–æ
                      </button>
                    )}
                  </div>
                </div>
              ))
            )}
          </div>
        </div>

        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ */}
        <div className="admin-section">
          <div className="section-header">
            <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h2>
            <div className="filters">
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="search-input"
              />
              <select 
                value={filterRole} 
                onChange={(e) => setFilterRole(e.target.value)}
                className="filter-select"
              >
                <option value="all">–í—Å–µ —Ä–æ–ª–∏</option>
                <option value="user">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</option>
                <option value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
              </select>
              <select 
                value={filterStatus} 
                onChange={(e) => setFilterStatus(e.target.value)}
                className="filter-select"
              >
                <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                <option value="active">–ê–∫—Ç–∏–≤–Ω—ã–µ</option>
                <option value="inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</option>
              </select>
            </div>
          </div>

          <div className="users-table">
            <table>
              <thead>
                <tr>
                  <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
                  <th>Email</th>
                  <th>–†–æ–ª—å</th>
                  <th>–°—Ç–∞—Ç—É—Å</th>
                  <th>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥</th>
                  <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
              </thead>
              <tbody>
                {filteredUsers.map(user => (
                  <tr key={user.id}>
                    <td>
                      <div className="user-info">
                        <div className="user-name">
                          {user.firstName} {user.lastName}
                        </div>
                        <div className="user-id">ID: {user.id}</div>
                      </div>
                    </td>
                    <td>{user.email}</td>
                    <td>
                      <span className={`role-badge ${user.role}`}>
                        {user.role === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                      </span>
                    </td>
                    <td>
                      <span 
                        className="status-badge"
                        style={{ backgroundColor: getStatusColor(user.status) }}
                      >
                        {user.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                      </span>
                    </td>
                    <td>
                      {user.lastLoginAt ? 
                        new Date(user.lastLoginAt).toLocaleDateString('ru-RU') : 
                        '–ù–∏–∫–æ–≥–¥–∞'
                      }
                    </td>
                    <td>
                      <div className="user-actions">
                        <button 
                          className="btn btn--small"
                          onClick={() => toggleUserStatus(user.id, !user.isActive)}
                        >
                          {user.isActive ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
                        </button>
                        <button 
                          className="btn btn--small btn--secondary"
                          onClick={() => resetUserPassword()}
                        >
                          –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
                        </button>
                        <button 
                          className="btn btn--small btn--danger"
                          onClick={() => terminateUserSessions()}
                        >
                          –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏–∏
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã */}
        <div className="admin-section">
          <h2>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</h2>
          <div className="stats-grid">
            <div className="stat-card">
              <div className="stat-value">{users.length}</div>
              <div className="stat-label">–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
            </div>
            <div className="stat-card">
              <div className="stat-value">
                {users.filter(u => u.isActive).length}
              </div>
              <div className="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
            </div>
            <div className="stat-card">
              <div className="stat-value">
                {users.filter(u => u.role === 'admin').length}
              </div>
              <div className="stat-label">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</div>
            </div>
            <div className="stat-card">
              <div className="stat-value">
                {securityAlerts.filter(a => !a.resolved).length}
              </div>
              <div className="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Admin; 