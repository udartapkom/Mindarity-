pipeline {
    agent any
    
    environment {
        // –í–µ—Ä—Å–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        PROJECT_VERSION = "${env.BUILD_NUMBER}"
        PROJECT_NAME = "Mindarity"
        
        // Docker –æ–±—Ä–∞–∑—ã
        BACKEND_IMAGE = "mindarity-backend"
        FRONTEND_IMAGE = "mindarity-frontend"
        NGINX_IMAGE = "mindarity-nginx"
        
        // –†–µ–≥–∏—Å—Ç—Ä Docker
        DOCKER_REGISTRY = "your-registry.com"
        
        // –¶–µ–ª–µ–≤—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        DEV_ENVIRONMENT = "dev"
        STAGING_ENVIRONMENT = "staging"
        PROD_ENVIRONMENT = "prod"
        
        // Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        SLACK_CHANNEL = "#deployments"
    }
    
    options {
        // –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–±–æ—Ä–∫–∏
        buildDiscarder(logRotator(numToKeepStr: '10'))
        
        // –¢–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ–≥–æ pipeline
        timeout(time: 1, unit: 'HOURS')
        
        // –û—Ç–º–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫
        disableConcurrentBuilds()
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞..."
                
                // –û—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
                cleanWs()
                
                // –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
                checkout scm
                
                // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–º–∏—Ç–µ
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: 'git rev-parse --short HEAD',
                        returnStdout: true
                    ).trim()
                    
                    env.GIT_BRANCH = sh(
                        script: 'git rev-parse --abbrev-ref HEAD',
                        returnStdout: true
                    ).trim()
                    
                    env.GIT_COMMIT_MESSAGE = sh(
                        script: 'git log -1 --pretty=%B',
                        returnStdout: true
                    ).trim()
                }
                
                echo "‚úÖ –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω: ${env.GIT_BRANCH}@${env.GIT_COMMIT_SHORT}"
            }
        }
        
        stage('Code Quality') {
            parallel {
                stage('Backend Lint & Test') {
                    steps {
                        echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ backend –∫–æ–¥–∞..."
                        
                        dir('backend') {
                            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                            sh 'npm ci'
                            
                            // –õ–∏–Ω—Ç–∏–Ω–≥
                            sh 'npm run lint'
                            
                            // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
                            sh 'npm run test'
                            
                            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
                            sh 'npm run test:cov'
                        }
                    }
                    post {
                        always {
                            // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
                            publishTestResults testResultsPattern: 'backend/coverage/**/*.xml'
                            
                            // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
                            publishCoverage adapters: [lcovAdapter('backend/coverage/lcov.info')]
                        }
                    }
                }
                
                stage('Frontend Lint & Test') {
                    steps {
                        echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ frontend –∫–æ–¥–∞..."
                        
                        dir('frontend') {
                            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                            sh 'npm ci'
                            
                            // –õ–∏–Ω—Ç–∏–Ω–≥
                            sh 'npm run lint'
                            
                            // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
                            sh 'npm run test'
                            
                            // –°–±–æ—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                            sh 'npm run build'
                        }
                    }
                    post {
                        always {
                            // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
                            publishTestResults testResultsPattern: 'frontend/coverage/**/*.xml'
                        }
                    }
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                echo "üõ°Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
                
                script {
                    // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                    sh 'npm audit --audit-level moderate'
                    
                    // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤
                    sh 'docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v ${WORKSPACE}:/workspace aquasec/trivy image --severity HIGH,CRITICAL ${BACKEND_IMAGE}:${PROJECT_VERSION}'
                    sh 'docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v ${WORKSPACE}:/workspace aquasec/trivy image --severity HIGH,CRITICAL ${FRONTEND_IMAGE}:${PROJECT_VERSION}'
                }
            }
        }
        
        stage('Build Docker Images') {
            steps {
                echo "üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
                
                script {
                    // –°–±–æ—Ä–∫–∞ backend –æ–±—Ä–∞–∑–∞
                    sh "docker build -t ${BACKEND_IMAGE}:${PROJECT_VERSION} -t ${BACKEND_IMAGE}:latest ./backend"
                    
                    // –°–±–æ—Ä–∫–∞ frontend –æ–±—Ä–∞–∑–∞
                    sh "docker build -t ${FRONTEND_IMAGE}:${PROJECT_VERSION} -t ${FRONTEND_IMAGE}:latest ./frontend"
                    
                    // –°–±–æ—Ä–∫–∞ nginx –æ–±—Ä–∞–∑–∞
                    sh "docker build -t ${NGINX_IMAGE}:${PROJECT_VERSION} -t ${NGINX_IMAGE}:latest ./nginx"
                    
                    // –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞
                    if (env.GIT_BRANCH == 'main' || env.GIT_BRANCH == 'master') {
                        sh "docker tag ${BACKEND_IMAGE}:${PROJECT_VERSION} ${DOCKER_REGISTRY}/${BACKEND_IMAGE}:${PROJECT_VERSION}"
                        sh "docker tag ${FRONTEND_IMAGE}:${PROJECT_VERSION} ${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:${PROJECT_VERSION}"
                        sh "docker tag ${NGINX_IMAGE}:${PROJECT_VERSION} ${DOCKER_REGISTRY}/${NGINX_IMAGE}:${PROJECT_VERSION}"
                    }
                }
            }
        }
        
        stage('Push to Registry') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                }
            }
            steps {
                echo "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –≤ registry..."
                
                script {
                    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ registry
                    withCredentials([usernamePassword(credentialsId: 'docker-registry', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh "docker login ${DOCKER_REGISTRY} -u ${DOCKER_USER} -p ${DOCKER_PASS}"
                        
                        // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–∑–æ–≤
                        sh "docker push ${DOCKER_REGISTRY}/${BACKEND_IMAGE}:${PROJECT_VERSION}"
                        sh "docker push ${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:${PROJECT_VERSION}"
                        sh "docker push ${DOCKER_REGISTRY}/${NGINX_IMAGE}:${PROJECT_VERSION}"
                        
                        // –û—Ç–ø—Ä–∞–≤–∫–∞ latest —Ç–µ–≥–æ–≤
                        sh "docker push ${DOCKER_REGISTRY}/${BACKEND_IMAGE}:latest"
                        sh "docker push ${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:latest"
                        sh "docker push ${DOCKER_REGISTRY}/${NGINX_IMAGE}:latest"
                    }
                }
            }
        }
        
        stage('Deploy to Dev') {
            when {
                branch 'develop'
            }
            steps {
                echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ DEV –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
                
                script {
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                    updateVersionInInterface(env.DEV_ENVIRONMENT)
                    
                    // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Docker Compose
                    sh "cd ${WORKSPACE} && docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --build"
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
                    sh "sleep 30 && curl -f http://dev.mindarity.ru/health || exit 1"
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'main'
            }
            steps {
                echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ STAGING –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
                
                script {
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                    updateVersionInInterface(env.STAGING_ENVIRONMENT)
                    
                    // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Docker Compose
                    sh "cd ${WORKSPACE} && docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d --build"
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
                    sh "sleep 30 && curl -f http://staging.mindarity.ru/health || exit 1"
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ PRODUCTION –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
                
                script {
                    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
                    input message: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ PRODUCTION?', ok: '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å'
                    
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                    updateVersionInInterface(env.PROD_ENVIRONMENT)
                    
                    // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Docker Compose
                    sh "cd ${WORKSPACE} && docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build"
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
                    sh "sleep 30 && curl -f https://mindarity.ru/health || exit 1"
                    
                    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞ —Ä–µ–ª–∏–∑–∞
                    sh "git tag -a v${PROJECT_VERSION} -m 'Release version ${PROJECT_VERSION}'"
                    sh "git push origin v${PROJECT_VERSION}"
                }
            }
        }
        
        stage('Post-Deployment Tests') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                echo "üß™ –ü–æ—Å—Ç-–¥–µ–ø–ª–æ–π —Ç–µ—Å—Ç—ã..."
                
                script {
                    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    def testUrl = ""
                    if (env.GIT_BRANCH == 'main') {
                        testUrl = "https://mindarity.ru"
                    } else if (env.GIT_BRANCH == 'develop') {
                        testUrl = "http://dev.mindarity.ru"
                    }
                    
                    // Smoke —Ç–µ—Å—Ç—ã
                    sh "curl -f ${testUrl}/health || exit 1"
                    sh "curl -f ${testUrl}/api || exit 1"
                    
                    // API —Ç–µ—Å—Ç—ã
                    sh "npm run test:e2e -- --baseUrl=${testUrl}"
                }
            }
        }
    }
    
    post {
        always {
            echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞..."
            
            // –û—á–∏—Å—Ç–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
            sh "docker image prune -f"
            
            // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            sh "docker container prune -f"
            
            // –û—á–∏—Å—Ç–∫–∞ volumes
            sh "docker volume prune -f"
        }
        
        success {
            echo "‚úÖ Pipeline –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
            
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack
            slackSend(
                channel: env.SLACK_CHANNEL,
                color: 'good',
                message: "‚úÖ ${env.PROJECT_NAME} v${env.PROJECT_VERSION} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –≤ ${env.GIT_BRANCH} –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
            )
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            script {
                if (env.GIT_BRANCH == 'main') {
                    updateVersionInInterface(env.PROD_ENVIRONMENT)
                } else if (env.GIT_BRANCH == 'develop') {
                    updateVersionInInterface(env.DEV_ENVIRONMENT)
                }
            }
        }
        
        failure {
            echo "‚ùå Pipeline –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!"
            
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack
            slackSend(
                channel: env.SLACK_CHANNEL,
                color: 'danger',
                message: "‚ùå ${env.PROJECT_NAME} v${env.PROJECT_VERSION} - –æ—à–∏–±–∫–∞ –≤ pipeline –Ω–∞ –≤–µ—Ç–∫–µ ${env.GIT_BRANCH}"
            )
            
            // –û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
            script {
                if (env.GIT_BRANCH == 'main') {
                    rollbackToPreviousVersion(env.PROD_ENVIRONMENT)
                } else if (env.GIT_BRANCH == 'develop') {
                    rollbackToPreviousVersion(env.DEV_ENVIRONMENT)
                }
            }
        }
        
        cleanup {
            echo "üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
def updateVersionInInterface(environment) {
    echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –¥–ª—è ${environment}..."
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –≤–µ—Ä—Å–∏–µ–π
    sh """
        echo '{
            "version": "${env.PROJECT_VERSION}",
            "buildNumber": "${env.BUILD_NUMBER}",
            "commit": "${env.GIT_COMMIT_SHORT}",
            "branch": "${env.GIT_BRANCH}",
            "deployedAt": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "environment": "${environment}"
        }' > version.json
    """
    
    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if (environment == env.PROD_ENVIRONMENT) {
        sh "docker cp version.json mindarity-frontend:/app/public/version.json"
    } else if (environment == env.DEV_ENVIRONMENT) {
        sh "docker cp version.json mindarity-frontend:/app/public/version.json"
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
def rollbackToPreviousVersion(environment) {
    echo "üîÑ –û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –¥–ª—è ${environment}..."
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
    def previousVersion = sh(
        script: "docker images ${BACKEND_IMAGE} --format '{{.Tag}}' | grep -v latest | sort -V | tail -2 | head -1",
        returnStdout: true
    ).trim()
    
    if (previousVersion) {
        echo "–û—Ç–∫–∞—Ç –∫ –≤–µ—Ä—Å–∏–∏: ${previousVersion}"
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ docker-compose —Ñ–∞–π–ª–∞
        sh "sed -i 's/image: ${BACKEND_IMAGE}:.*/image: ${BACKEND_IMAGE}:${previousVersion}/g' docker-compose.yml"
        sh "sed -i 's/image: ${FRONTEND_IMAGE}:.*/image: ${FRONTEND_IMAGE}:${previousVersion}/g' docker-compose.yml"
        sh "sed -i 's/image: ${NGINX_IMAGE}:.*/image: ${NGINX_IMAGE}:${previousVersion}/g' docker-compose.yml"
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        sh "docker-compose up -d"
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞—Ç–µ
        slackSend(
            channel: env.SLACK_CHANNEL,
            color: 'warning',
            message: "‚ö†Ô∏è ${env.PROJECT_NAME} –æ—Ç–∫–∞—á–µ–Ω –∫ –≤–µ—Ä—Å–∏–∏ ${previousVersion} –≤ ${environment} –æ–∫—Ä—É–∂–µ–Ω–∏–∏"
        )
    }
}
